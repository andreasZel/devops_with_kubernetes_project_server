name: Release application

on:
  push:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: dwk-cluster
  GKE_ZONE: europe-west1-b
  REGISTRY: europe-west1-docker.pkg.dev
  REPOSITORY: my-repository #Artifact registry for images
  BRANCH: ${{ github.ref_name }}

  #image names
  IMAGE_SERVER: zelhs/project_server
  IMAGE_TODO: zelhs/todoapp
  IMAGE_RANDOM: zelhs/random-article
  IMAGE_BACKUP: zelhs/backup-service
  IMAGE_BROADCASTER: zelhs/broadcaster

jobs:
  build-publish-deploy:
    name: Build, Publish and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - run: gcloud --quiet auth configure-docker $REGISTRY

      - name: 'Get GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          project_id: '${{ env.PROJECT_ID }}'
          location: '${{ env.GKE_ZONE }}'

      # Form image tags
      - name: 'Form image names'
        run: |
          echo "IMAGE_TAG_SERVER=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE_SERVER:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG_TODO=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE_TODO:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG_RANDOM=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE_RANDOM:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG_BACKUP=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE_BACKUP:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG_BROADCASTER=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE_BROADCASTER:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV

      # Build & Push Server
      - name: Build & Push project_server
        run: |
          docker build -t $IMAGE_TAG_SERVER .
          docker push $IMAGE_TAG_SERVER

      # Build & Push todoApp
      - name: Build & Push todoApp
        run: |
          docker build -t $IMAGE_TAG_TODO ./todoApp
          docker push $IMAGE_TAG_TODO

      # Build & Push createRandomTodo
      - name: Build & Push createRandomTodo
        run: |
          docker build -t $IMAGE_TAG_RANDOM ./createRandomTodo
          docker push $IMAGE_TAG_RANDOM

      # Build & Push backup-service
      - name: Build & Push backup
        run: |
          docker build -t $IMAGE_TAG_BACKUP ./todoApp/backup
          docker push $IMAGE_TAG_BACKUP
     
      # Build & Push broadcaster-service
      - name: Build & Push broadcaster
        run: |
          docker build -t $IMAGE_TAG_BROADCASTER ./broadcaster
          docker push $IMAGE_TAG_BROADCASTER
          
      - name: Install SOPS
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg wget
          wget https://github.com/getsops/sops/releases/download/v3.10.2/sops-v3.10.2.linux.amd64
          chmod +x sops-v3.10.2.linux.amd64
          sudo mv sops-v3.10.2.linux.amd64 /usr/local/bin/sops          

      # Deploy
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2.1.0

      - name: Deploy
        run: |-
          branch=${GITHUB_REF#refs/heads/}

          if [[ ${GITHUB_REF#refs/heads/} == "main" ]]; then
            namespaceToUse="project"
          else 
            namespaceToUse="$branch"
          fi

          kubectl create namespace "$namespaceToUse" || true
          
          # Apply secrets in the correct namespace

          export SOPS_AGE_KEY="${{ secrets.SOPS_AGE_KEY }}"
          sops --decrypt --encrypted-regex '^(stringData)$' ./manifest/gcp-backup.secret.enc.yaml | kubectl apply -n "$namespaceToUse" -f -
          sops --decrypt --encrypted-regex '^(stringData)$' ./manifest/broadcasterSecret.enc.yml | kubectl apply -n "$namespaceToUse" -f -
          
          kubectl config set-context --current --namespace="$namespaceToUse"
          kustomize edit set namespace "$namespaceToUse"
          kustomize edit set image PROJECT/IMAGE_SERVER=$IMAGE_TAG_SERVER
          kustomize edit set image PROJECT/IMAGE_TODO=$IMAGE_TAG_TODO
          kustomize edit set image PROJECT/IMAGE_RANDOM=$IMAGE_TAG_RANDOM
          kustomize edit set image PROJECT/IMAGE_BACKUP=$IMAGE_TAG_BACKUP
          kustomize edit set image PROJECT/IMAGE_BROADCASTER=$IMAGE_TAG_BROADCASTER
          kustomize build . | kubectl apply -f -
          kubectl rollout status deployment projectserver-dep -n "$namespaceToUse" --timeout=600s
          kubectl rollout status deployment todos-dep -n "$namespaceToUse" --timeout=600s
          kubectl rollout status deployment broadcaster-dep -n "$namespaceToUse" --timeout=600s
          kubectl get cronjob random-article-job -n "$namespaceToUse"
          kubectl get cronjob db-backup -n "$namespaceToUse"
